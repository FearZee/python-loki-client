openapi: 3.0.1
info:
  title: Grafana Loki
  version: 2.6.x
externalDocs:
  url: https://grafana.com/docs/loki/latest/api/
paths:
  /loki/api/v1/query:
    get:
      tags:
        - Query
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
            default: 100
        - name: time
          in: query
          schema:
            type: string
            format: date-time
        - name: direction
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Direction"
        - name: X-Scope-OrgID
          in: header
          schema:
            type: string
      responses:
        '200':
          description: OK response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResponseBody"
  /loki/api/v1/query_range:
    get:
      tags:
        - Query Range
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            default: 100
        - name: start
          in: query
          schema:
            $ref: "#/components/schemas/TimestampFormat"
        - name: end
          in: query
          schema:
            $ref: "#/components/schemas/TimestampFormat"
        - name: step
          in: query
          schema:
            $ref: "#/components/schemas/TimestampFormat"
        - name: interval
          in: query
          schema:
            type: number
        - name: direction
          in: query
          schema:
            $ref: "#/components/schemas/Direction"
        - name: X-Scope-OrgID
          in: header
          schema:
            type: string
      responses:
        '200':
          description: OK response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResponseBody"

  /loki/api/v1/labels:
    get:
      tags:
        - Labels
      parameters:
        - name: start
          in: query
          description: The start time for the query as a nanosecond Unix epoch. Defaults to 6 hours ago.
          required: false
          schema:
            type: integer
        - name: end
          in: query
          description: The end time for the query as a nanosecond Unix epoch. Defaults to now.
          required: false
          schema:
            type: integer
        - name: since
          in: query
          description: A duration used to calculate start relative to end. If end is in the future, start is calculated as this duration before now. Any value specified for start supersedes this parameter.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelsResponseBody"

  /ready:
    get:
      tags:
        - Ready
      responses:
        '200':
          description: OK response.

  /loki/api/v1/format_query:
    get:
      tags:
        - Format Query
      parameters:
        - name: query
          in: query
          description: A LogQL query string.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FormatQueryResponseBody"

    post:
      tags:
        - Format Query
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                query:
                  type: string
      responses:
        '200':
          description: OK response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FormatQueryResponseBody"

  /services:
    get:
      tags:
        - Services
      summary: Get a list of all running services and their current states.
      description: |
        Returns a list of all running services and their current states.
      responses:
        '200':
          description: OK response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServicesListResponseBody"


components:
  schemas:
    Direction:
      type: string
      enum: [ forward, backward ]
      default: backward
    TimestampFormat:
      oneOf:
        - type: string
          format: date-time
        - type: integer
        - type: number
    QueryResponseBody:
      required:
        - status
        - data
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          $ref: "#/components/schemas/QueryResponseData"
      example:
        id: 01FCNDV6P870EA6S7TK1DSYDG0
        name: My test API key
    QueryResponseData:
      type: object
      required:
        - resultType
        - result
        - stats
      properties:
        resultType:
          enum:
            - vector
            - streams
        result:
          type: array
          items:
            $ref: "#/components/schemas/QueryResponseResult"
        stats:
          $ref: "#/components/schemas/QueryStatistics"
    QueryResponseResult:
      type: object
      required:
        - values
      properties:
        metric:
          $ref: "#/components/schemas/QueryResponseMetric"
        streams:
          $ref: "#/components/schemas/QueryResponseStreams"
        values:
          type: array
          items:
            type: string
    QueryStatistics:
      type: object
      required:
        - summary
        - querier
        - ingester
      properties:
        summary:
          $ref: "#/components/schemas/QueryStatisticsSummary"
        querier:
          $ref: "#/components/schemas/QueryStatisticsQuerier"
        ingester:
          $ref: "#/components/schemas/QueryStatisticsIngester"
    QueryStatisticsSummary:
      type: object
      properties:
        bytesProcessedPerSecond:
          type: integer
          minimum: 0
        linesProcessedPerSecond:
          type: integer
          minimum: 0
        totalBytesProcessed:
          type: integer
          minimum: 0
        totalLinesProcessed:
          type: integer
          minimum: 0
        execTime:
          type: integer
          minimum: 0
        queueTime:
          type: integer
          minimum: 0
        subqueries:
          type: integer
          minimum: 0
        totalEntriesReturned:
          type: integer
          minimum: 0
    QueryStatisticsQuerier:
      type: object
      required:
        - store
      properties:
        store:
          $ref: "#/components/schemas/QueryStatisticsStore"
    QueryStatisticsIngester:
      type: object
      required:
        - totalReached
        - totalChunksMatched
        - totalBatches
        - totalLinesSent
      properties:
        totalReached:
          type: integer
          minimum: 0
        totalChunksMatched:
          type: integer
          minimum: 0
        totalBatches:
          type: integer
          minimum: 0
        totalLinesSent:
          type: integer
          minimum: 0
        store:
          $ref: "#/components/schemas/QueryStatisticsStore"
    QueryStatisticsStore:
      type: object
      required:
        - totalChunksRef
        - totalChunksDownloaded
        - chunksDownloadTime
      properties:
        totalChunksRef:
          type: integer
          minimum: 0
        totalChunksDownloaded:
          type: integer
          minimum: 0
        chunksDownloadTime:
          type: integer
          minimum: 0
        chunk:
          type: object
          required:
            - headChunkBytes
            - headChunkLines
            - decompressedBytes
            - decompressedLines
            - compressedBytes
          properties:
            headChunkBytes:
              type: integer
              minimum: 0
            headChunkLines:
              type: integer
              minimum: 0
            decompressedBytes:
              type: integer
              minimum: 0
            decompressedLines:
              type: integer
              minimum: 0
            compressedBytes:
              type: integer
              minimum: 0
            totalDuplicates:
              type: integer
              minimum: 0
    QueryResponseStreams:
      type: object
    QueryResponseMetric:
      type: object
      properties:
        level:
          enum:
            - error
            - warn
            - info
            - debug
    LabelsResponseBody:
      type: object
      properties:
        status:
          type: string
          description: The status of the response (e.g., "success").
        data:
          type: array
          items:
            type: string
          description: |
            An array containing the list of known labels.
    FormatQueryResponseBody:
      type: object
      properties:
        status:
          type: string
          description: The status of the response (e.g., "success").
        data:
          type: string
          description: The formatted LogQL query string.

    ServiceStateEnum:
      type: string
      enum: [ New, Starting, Running, Stopping, Terminated, Failed ]
    ServicesListResponseBody:
      type: array
      items:
        type: object
        properties:
          service_name:
            type: string
            description: The name of the service.
          state:
            $ref: "#/components/schemas/ServiceStateEnum"
            description: The current state of the service.
